# buildspec.yml file for AWS CodeProject/CodeBuild
# I was never able to get it to work though
# The application was not able to read from the socket. See: https://stackoverflow.com/questions/35177177/nginx-error-13-permission-denied-while-connecting-to-upstream

# NOTE: the `artifacts` step is required to generate some output from CodeBuild to CodeDeploy,
# otherwise progresses won't be saved for the next step

# image:  cimg/ruby:3.0.4-node
# source: https://registry.hub.docker.com/r/cimg/ruby

# ------------ Version 1 ------------
version: 0.2

phases:
  install:
    commands:
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
  pre_build:
    commands:
      - echo Logging in to Amazon ECR....
      - aws --version
      - $(aws ecr get-login --no-include-email --region $CI_REGION)

      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo "The commit hash is $COMMIT_HASH"
      - IMAGE_TAG=${COMMIT_HASH:=latest}

      - echo "Creating folders for pid files"
      - mkdir shared
      - mkdir shared/pids
      - mkdir shared/sockets

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPO_URL:latest .
      - docker tag $REPO_URL:latest $REPO_URL:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPO_URL:latest
      - docker push $REPO_URL:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"web","imageUri":"%s"}]' $REPO_URL:$IMAGE_TAG > imagedefinitions.json
artifacts:
  files: imagedefinitions.json


# ------------ Version 2 ------------
version: 0.2

phases:
  pre_build:
    commands:
      - echo "NPM and Yarn versions..."
      - npm -v
      - yarn -v
  build:
    commands:
      - echo "Installing Bundler..."
      - apt-get install -y libxml2-dev
      - gem install bundler -v $(tail -n1 Gemfile.lock)
      - bundle install --without development:test
  post_build:
    commands:
      - echo "Installing Webpack and precompiling assets..."
      - npm install webpack
      - bundle exec rake assets:precompile

# required to upload the artifacts to S3
artifacts:
  files:
    - '**/*'
